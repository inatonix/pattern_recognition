{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn import datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "iris = datasets.load_iris()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_vals = np.array([x[0:3] for x in iris.data])\n",
    "y_vals = np.array([x[3] for x in iris.data])\n",
    "\n",
    "sess = tf.Session()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_data = tf.placeholder(shape=[None, 3],dtype=tf.float32)\n",
    "y_data = tf.placeholder(shape=[None, 1],dtype=tf.float32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [],
   "source": [
    "hidden_layer_nodes = 5\n",
    "W1 = tf.Variable(tf.random_normal(shape=[3,hidden_layer_nodes]))\n",
    "W2 = tf.Variable(tf.random_normal(shape=[hidden_layer_nodes,1]))\n",
    "\n",
    "b1 = tf.Variable(tf.random_normal(shape=[hidden_layer_nodes]))\n",
    "b2 = tf.Variable(tf.random_normal(shape=[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "## DATA SETTING"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "seed = 2\n",
    "tf.set_random_seed(seed)\n",
    "np.random.seed(seed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_indices = np.random.choice(len(x_vals), round(len(x_vals)*0.8), replace=False)\n",
    "test_indices = np.random.choice(list(set(range(len(x_vals))) - set(train_indices)))\n",
    "x_vals_train = x_vals[train_indices]\n",
    "x_vals_test = x_vals[test_indices]\n",
    "y_vals_train = y_vals[train_indices]\n",
    "y_vals_test = y_vals[test_indices]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "def normalize_cols(m):\n",
    "    col_max = m.max(axis=0)\n",
    "    col_min = m.min(axis=0)\n",
    "    return (m - col_min) / (col_max - col_min)\n",
    "\n",
    "x_vals_train = np.nan_to_num(normalize_cols(x_vals_train))\n",
    "x_vals_test = np.nan_to_num(normalize_cols(x_vals_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [],
   "source": [
    "batch_size = 20"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "hidden_output = tf.nn.relu(tf.add(tf.matmul(x_data, W1), b1))\n",
    "output = tf.nn.relu(tf.add(tf.matmul(hidden_output, W2), b2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "loss = tf.reduce_mean(tf.square(y_data - output))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_opt = tf.train.GradientDescentOptimizer(0.005)\n",
    "train_step = my_opt.minimize(loss)\n",
    "\n",
    "init = tf.global_variables_initializer()\n",
    "sess.run(init)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1.3])"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "np.transpose([y_vals_test])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [],
   "source": [
    "loss_vec = []\n",
    "test_loss = []\n",
    "\n",
    "for i in range(500):\n",
    "    rand_index = np.random.choice(len(x_vals_train), size=batch_size)\n",
    "    rand_x = x_vals_train[rand_index]\n",
    "    rand_y = np.transpose([y_vals_train[rand_index]])\n",
    "    \n",
    "    sess.run(train_step, feed_dict={x_data: rand_x, y_data: rand_y})\n",
    "    \n",
    "    temp_loss = sess.run(loss, feed_dict={x_data: rand_x, y_data: rand_y})\n",
    "    loss_vec.append(np.sqrt(temp_loss))\n",
    "    \n",
    "#     test_temp_loss = sess.run(loss, feed_dict={x_data: x_vals_test, y_data:np.transpose([y_vals_test])})\n",
    "#     test_loss.append(np.sqrt(test_temp_loss))\n",
    "    \n",
    "#     if (i+1)%50 == 0:\n",
    "#         print(\"Generation:\" + str(i+1) + \". Loss = \" +str(temp_loss))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nrkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11b554a90>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(loss_vec, '-k', label='Train Loss')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
