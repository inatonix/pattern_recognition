{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [],
   "source": [
    "import tensorflow as tf\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "from sklearn import datasets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "metadata": {},
   "outputs": [],
   "source": [
    "iris = datasets.load_iris()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_vals = np.array([x[0:3] for x in iris.data])\n",
    "y_vals = np.array([x[3] for x in iris.data])\n",
    "\n",
    "sess = tf.Session()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [],
   "source": [
    "seed = 2\n",
    "tf.set_random_seed(seed)\n",
    "np.random.seed(seed)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [],
   "source": [
    "train_indices = np.random.choice(len(x_vals), round(len(x_vals)*0.8), replace=False)\n",
    "test_indices = np.array(list(set(range(len(x_vals))) - set(train_indices)))\n",
    "x_vals_train = x_vals[train_indices]\n",
    "x_vals_test = x_vals[test_indices]\n",
    "y_vals_train = y_vals[train_indices]\n",
    "y_vals_test = y_vals[test_indices]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [],
   "source": [
    "def normalize_cols(m):\n",
    "    col_max = m.max(axis=0)\n",
    "    col_min = m.min(axis=0)\n",
    "    return (m - col_min) / (col_max - col_min)\n",
    "\n",
    "x_vals_train = np.nan_to_num(normalize_cols(x_vals_train))\n",
    "x_vals_test = np.nan_to_num(normalize_cols(x_vals_test))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [],
   "source": [
    "## DATA SETTING"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [],
   "source": [
    "batch_size = 50"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_data = tf.placeholder(shape=[None,3],dtype=tf.float32)\n",
    "y_target = tf.placeholder(shape=[None, 1],dtype=tf.float32)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [],
   "source": [
    "hidden_layer_nodes = 5\n",
    "W1 = tf.Variable(tf.random_normal(shape=[3,hidden_layer_nodes]))\n",
    "W2 = tf.Variable(tf.random_normal(shape=[hidden_layer_nodes,1]))\n",
    "\n",
    "b1 = tf.Variable(tf.random_normal(shape=[hidden_layer_nodes]))\n",
    "b2 = tf.Variable(tf.random_normal(shape=[1]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [],
   "source": [
    "hidden_output = tf.nn.relu(tf.add(tf.matmul(x_data, W1), b1))\n",
    "output = tf.nn.relu(tf.add(tf.matmul(hidden_output, W2), b2))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [],
   "source": [
    "loss = tf.reduce_mean(tf.square(y_target - output))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 180,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_opt = tf.train.GradientDescentOptimizer(0.005)\n",
    "train_step = my_opt.minimize(loss)\n",
    "\n",
    "init = tf.global_variables_initializer()\n",
    "sess.run(init)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 181,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generation:50. Loss = 0.11355796\n",
      "Generation:100. Loss = 0.15359434\n",
      "Generation:150. Loss = 0.09494774\n",
      "Generation:200. Loss = 0.147674\n",
      "Generation:250. Loss = 0.108258426\n",
      "Generation:300. Loss = 0.048183907\n",
      "Generation:350. Loss = 0.061666388\n",
      "Generation:400. Loss = 0.048926722\n",
      "Generation:450. Loss = 0.07286452\n",
      "Generation:500. Loss = 0.07035624\n"
     ]
    }
   ],
   "source": [
    "loss_vec = []\n",
    "test_loss = []\n",
    "\n",
    "for i in range(500):\n",
    "    rand_index = np.random.choice(len(x_vals_train), size=batch_size)\n",
    "    rand_x = x_vals_train[rand_index]\n",
    "    rand_y = np.transpose([y_vals_train[rand_index]])\n",
    "    \n",
    "    sess.run(train_step, feed_dict={x_data: rand_x, y_target: rand_y})\n",
    "    \n",
    "    temp_loss = sess.run(loss, feed_dict={x_data: rand_x, y_target: rand_y})\n",
    "    loss_vec.append(np.sqrt(temp_loss))\n",
    "    \n",
    "    test_temp_loss = sess.run(loss, feed_dict={x_data: x_vals_test, y_target:np.transpose([y_vals_test])})\n",
    "    test_loss.append(np.sqrt(test_temp_loss))\n",
    "    \n",
    "    if (i+1)%50 == 0:\n",
    "        print(\"Generation:\" + str(i+1) + \". Loss = \" +str(temp_loss))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 182,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(30, 3)"
      ]
     },
     "execution_count": 182,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x_vals_test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 183,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x11e62cda0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(loss_vec, '-k', label='Train Loss')\n",
    "plt.plot(test_loss, 'r--', label='Test Loss')\n",
    "plt.show()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.1"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
